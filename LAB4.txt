# Lab 4 Code

setwd("~/LAB04")
#Read input data from the database
#First up let us load the library RODBC
library('RODBC')
ch <- odbcConnect("Greenplum",uid="gpadmin",
      case="postgresql",pwd="changeme")
sqlDrop(ch,"income_state")
sqlQuery(ch,
"CREATE TABLE income_state AS
SELECT 
   f.name AS state,  
   round(avg(h.hinc),0) AS income  
FROM
   housing AS h 
JOIN
   fips AS f
ON
   h.state = f.code
WHERE 
   (h.hinc > 0 )
GROUP
    by f.name 
    DISTRIBUTED BY (income);"
)
sqlColumns(ch,"income_state")

  TABLE_QUALIFIER TABLE_OWNER   TABLE_NAME COLUMN_NAME DATA_TYPE TYPE_NAME PRECISION LENGTH
1       training2      public income_state       state        -1      text      8190   8190
2       training2      public income_state      income         2   numeric        28     30
  SCALE RADIX NULLABLE REMARKS COLUMN_DEF SQL_DATA_TYPE SQL_DATETIME_SUB CHAR_OCTET_LENGTH
1    NA    NA        1               <NA>            -1               NA                NA
2     6    10        1               <NA>             2               NA                NA
  ORDINAL_POSITION IS_NULLABLE DISPLAY_SIZE FIELD_TYPE AUTO_INCREMENT PHYSICAL NUMBER
1                1        <NA>         8190         25              0               1
2                2        <NA>           30       1700              0               2
  TABLE OID
1    686680
2    686680



income <- as.matrix(sqlFetch(ch,"income_state",
          rownames="state"))
summary(income)
  income     
 Min.   :25227  
 1st Qu.:46737  
 Median :52494  
 Mean   :53106  
 3rd Qu.:59696  
 Max.   :76265  

income
  income
MI  55672
MA  67152
NJ  74529
CA  66504
VT  50730
ME  45797
WI  53616




#Sort the Income
income <- sort(income)
 [1] 25227 39738 41466 41827 42677 42895 43314 43604 44478 45110 45439 45797 46135 46938
[15] 46983 47244 47538 47872 48003 48365 49588 50730 51135 51548 51761 52472 52516 53616
[29] 54269 54296 54416 55332 55672 56185 56359 56453 57801 58244 59489 60317 60630 60753
[43] 61146 61177 62433 62592 66504 66724 67152 68760 74529 76265


# Fit the k-means cluster with 3 initial cluster centers
km <- kmeans (income,3,15)
km
K-means clustering with 3 clusters of sizes 20, 13, 19

Cluster means:
      [,1]
1 44032.50
2 65306.31
3 54309.58

Clustering vector:
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2
[45] 2 2 2 2 2 2 2 2

Within cluster sum of squares by cluster:
[1] 487270369 341406241 136103261
 (between_SS / total_SS =  78.9 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss"
[6] "betweenss"    "size"



# plot clusters
plot(income, col = km$cluster)
# plot centers
points(km$centers, col = 1:3, pch = 8)
#Plot the within-group-sum of squares and 
#look for an "elbow" of the plot. The elbow 
#(if you can find one) tells you what the 
#appropriate number of clusters probably is.
wss <- numeric(15)
for (i in 1:15) wss[i] <- sum(kmeans(income, 
     centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
  ylab="Within groups sum of squares")

Review the output on the graphic window. Is there an elbow to the plot?
Yes, there is an elbow at 4

3. Repeat the modeling with a few values around the elbow (or 4 and 5 centers if there is no
elbow) and review the results.
Plots as PNG in github

odbcClose(ch)


STEP 12

DROP TABLE IF EXISTS myschema.data;
DROP TABLE IF EXISTS madlib.km_c;
DROP TABLE IF EXISTS madlib.km_p;
CREATE TABLE myschema.data (
pid INT
, position FLOAT8[])
DISTRIBUTED BY (pid);

CREATE TABLE

INSERT INTO myschema.data (pid,position[1])
SELECT
h.state
, round(avg(h.hinc),0)
FROM
housing AS h
WHERE
h.hinc > 0
GROUP BY
h.state
;

INSERT 0 52

SELECT madlib.kmeans_random('myschema.data', 'position', null,
'km_p', 'km_c','l2norm', 15,0.001,True, True, 6);

training2=# select * from madlib.km_c;
 cid |         coords         
-----+------------------------
   1 | {1}:{60458.2}
   3 | {1}:{53784}
   5 | {1}:{42499.875}
   2 | {1}:{47084.3333333333}
   4 | {1}:{25227}
   6 | {1}:{69989}
(6 rows)


SELECT * FROM madlib.km_p;
pid |   coords    | cid 
-----+-------------+-----
   2 | {1}:{47872} |   2
   4 | {1}:{61177} |   1
   6 | {1}:{56359} |   3
   8 | {1}:{47538} |   2
  10 | {1}:{61146} |   1
  12 | {1}:{55332} |   3
  14 | {1}:{51135} |   3
  16 | {1}:{48365} |   2
...



